# -*- coding: utf-8 -*-
"""forensic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XsMBcWM8Fg_BXw4o4MQlQI_sjvvSJT-y
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
import datetime
from PIL import Image

def error_level_analysis(image_path):
    try:
        # Load the image
        image = Image.open(image_path)

        # Convert the image to a numpy array
        image_array = np.array(image)

        # Get the pixel values of the image
        pixel_values = image_array.flatten()

        # Calculate the error level
        error_level = np.std(pixel_values) / 10

        # Calculate the percentage of pixel error level
        pixel_error_percentage = (error_level / np.mean(pixel_values)) * 100

        # Create a histogram for displaying the error
        plt.hist(pixel_values, bins=range(0, 256), color='r', alpha=0.7, label='Original Image')
        plt.axvline(np.mean(pixel_values), color='k', linestyle='dashed', linewidth=1, label='Mean Pixel Value')
        plt.axvline(np.mean(pixel_values) + error_level, color='b', linestyle='dashed', linewidth=1, label='Error Level +')
        plt.axvline(np.mean(pixel_values) - error_level, color='g', linestyle='dashed', linewidth=1, label='Error Level -')
        plt.xlabel("Pixel Value")
        plt.ylabel("Frequency")
        plt.title("Pixel Value Distribution")
        plt.legend()
        plt.show()

        # Print the error level and percentage of pixel error level
        print("Error level:", error_level)
        print("Percentage of pixel error level:", pixel_error_percentage)

    except Exception as e:
        print("Error:", str(e))

def get_metadata(image_path):
    try:
        # Open the image file
        with Image.open(image_path) as img:
            # Get basic information
            print("Image Format:", img.format)
            print("Image Mode:", img.mode)
            print("Image Size:", img.size)
            print("MIME Type:", Image.MIME[img.format])

            # Get creation date
            creation_date = os.path.getctime(image_path)
            creation_date_readable = datetime.datetime.fromtimestamp(creation_date).strftime('%Y-%m-%d %H:%M:%S')
            print("Creation Date (Original):", creation_date_readable)

            # Get modification date
            modification_date = os.path.getmtime(image_path)
            modification_date_readable = datetime.datetime.fromtimestamp(modification_date).strftime('%Y-%m-%d %H:%M:%S')
            print("Modification Date (Digitalized):", modification_date_readable)

            # Get compression rate
            compression_rate = os.path.getsize(image_path) / (img.size[0] * img.size[1])
            print("Compression Rate:", compression_rate)

            # Calculate bits per pixel
            bits_per_pixel = img.bits
            print("Bits per Pixel:", bits_per_pixel)

            # Calculate noise level (example: using standard deviation)
            img_cv2 = cv2.imread(image_path)
            noise_level = cv2.meanStdDev(cv2.cvtColor(img_cv2, cv2.COLOR_BGR2GRAY))[1][0][0]
            print("Noise Level:", noise_level)

            # Perform Error Level Analysis
            error_level_analysis(image_path)

    except Exception as e:
        print("Error:", str(e))

# Example usage
image_path = "/content/fake_image.jpg"  # Replace with the path to your image file

# Get Metadata of the Image
get_metadata(image_path)